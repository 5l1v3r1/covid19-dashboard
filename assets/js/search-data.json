{
  
    
        "post0": {
            "title": "COVID-19 growth analysis",
            "content": "#collapse-hide def plot_countries(df, countries, min_cases=100, ls=&#39;-&#39;, col=&#39;cases&#39;): for country in countries: (df.loc[(df.country == country) &amp; (df.cases &gt;= min_cases)] .reset_index()[col] .plot(label=country, ls=ls) ) sns.set_palette(sns.hls_palette(8, l=.45, s=.8)) # 8 countries max fig, ax = plt.subplots(figsize=(12, 8)) countries = [&#39;Italy&#39;, &#39;US (total)&#39;, &#39;Germany&#39;, &#39;France&#39;, &#39;Spain&#39;, &#39;United Kingdom (total)&#39;, &#39;Poland&#39;, &#39;Iran&#39;] plot_countries(df_confirmed, countries) asian_countries = [&#39;Singapore&#39;, &#39;Japan&#39;, &#39;Korea, South&#39;, &#39;Hong Kong&#39;] plot_countries(df_confirmed, asian_countries, ls=&#39;--&#39;) x = np.linspace(0, plt.xlim()[1] - 1) plt.plot(x, 100 * (1.33) ** x, ls=&#39;--&#39;, color=&#39;k&#39;, label=&#39;33% daily growth&#39;) plt.yscale(&#39;log&#39;); plt.title(&#39;Data up to {}&#39;.format(df_confirmed.index.max().strftime(&#39;%B %d, %Y&#39;))) plt.xlabel(&#39;Days from first 100 confirmed cases&#39;) plt.ylabel(&#39;Confirmed cases (log scale)&#39;) ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter()) plt.legend(bbox_to_anchor=(1.0, 1.0)) sns.despine() plt.annotate(&#39;Based on COVID Data Repository by Johns Hopkins CSSE nBy Thomas Wiecki&#39;, (0.05, 0.0), xycoords=&#39;figure fraction&#39;, fontsize=10); . . #collapse-hide sns.set_palette(sns.hls_palette(8, l=.45, s=.8)) # 8 countries max fig, ax = plt.subplots(figsize=(12, 8)) # 28000 intensiv, 80% belegt icu_germany = 28000 #* .2 df_tmp = df_confirmed.loc[lambda x: (x.country == &#39;Germany&#39;) &amp; (x.cases &gt; 100)].cases_crit df_tmp.plot(ax=ax) x = np.linspace(0, 30, 30) pd.Series(index=pd.date_range(df_tmp.index[0], periods=30), data=100*p_crit * (1.33) ** x).plot(ls=&#39;--&#39;, color=&#39;k&#39;, label=&#39;33% daily growth&#39;) plt.axhline(icu_germany, color=&#39;.3&#39;, ls=&#39;-.&#39;, label=&#39;Total ICU beds&#39;) plt.axhline(icu_germany * .2, color=&#39;.5&#39;, ls=&#39;:&#39;, label=&#39;Free ICU beds&#39;) plt.yscale(&#39;log&#39;); plt.title(&#39;When will Germany run out of ICU beds?&#39;) #plt.xlabel(&#39;Days from first 100 confirmed cases&#39;) plt.ylabel(&#39;Expected critical cases (log scale)&#39;) ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter()) plt.legend(bbox_to_anchor=(1.0, 1.0)) sns.despine() plt.annotate(&#39;Based on COVID Data Repository by Johns Hopkins CSSE by {} nBy Thomas Wiecki&#39;.format(df_confirmed.index.max().strftime(&#39;%B %d, %Y&#39;)), (0.05, 0.0), xycoords=&#39;figure fraction&#39;, fontsize=10); . . #collapse-hide df_confirmed[&#39;pct_change&#39;] = df_confirmed.groupby(&#39;country&#39;).cases.pct_change().rolling(5).mean() fig, ax = plt.subplots(figsize=(14, 8)) df_confirmed.set_index(&#39;country&#39;, append=True).loc[(slice(None), countries), :].loc[lambda x: x.cases &gt; 100].reset_index().set_index(&#39;days_since_100&#39;).groupby(&#39;country&#39;)[&#39;pct_change&#39;].plot() df_confirmed.set_index(&#39;country&#39;, append=True).loc[(slice(None), asian_countries), :].loc[lambda x: x.cases &gt; 100].reset_index().set_index(&#39;days_since_100&#39;).groupby(&#39;country&#39;)[&#39;pct_change&#39;].plot(ls=&#39;--&#39;) plt.ylim(0, 1) plt.xlim(0, 20) plt.axhline(.33, ls=&#39;--&#39;, color=&#39;k&#39;) plt.legend() plt.title(&#39;Data up to {}&#39;.format(df_confirmed.index.max().strftime(&#39;%B %d, %Y&#39;))) plt.xlabel(&#39;Days from first 100 confirmed cases&#39;) plt.ylabel(&#39;Percent change from previous # of confirmed&#39;) ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter()) plt.legend(bbox_to_anchor=(1.0, 1.0)) sns.despine() plt.annotate(&#39;Based on COVID Data Repository by Johns Hopkins CSSE nBy Thomas Wiecki&#39;, (0.05, 0.0), xycoords=&#39;figure fraction&#39;, fontsize=10); . . Updated hourly by GitHub Actions. . This visualization was made by Thomas Wiecki1. . . Data sourced from &quot;2019 Novel Coronavirus COVID-19 (2019-nCoV) Data Repository by Johns Hopkins CSSE&quot; GitHub repository and recreates the (pay-walled) plot in the Financial Times. This code is provided under the BSD-3 License. Link to original notebook.&#8617; . |",
            "url": "https://covid19dashboards.com/growth-analysis/",
            "relUrl": "/growth-analysis/",
            "date": " • Mar 14, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "COVID-19 Growth By State (US)",
            "content": "#collapse-hide for case_threshold in [30, 100]: df = US_cities[US_cities[&#39;Total&#39;] &gt; case_threshold].sort_values(by=&#39;Total&#39;) df = df.drop([&#39;Province/State&#39;, &#39;Country/Region&#39;, &#39;Lat&#39;, &#39;Long&#39;, &#39;Total&#39;], axis=1) cols = list(df) df = df[cols[-2:] + cols[:-2]] states = df.melt(id_vars=[&#39;Area&#39;,&#39;State&#39;], var_name=&#39;date&#39;, value_name=&#39;cases_confirmed&#39;) pivoted = states.groupby([&#39;State&#39;, &#39;date&#39;], as_index=False).sum().pivot(&#39;date&#39;, &#39;State&#39;).cumsum() cleaned = pivoted.reset_index().cases_confirmed cols = [] for col in cleaned: cols.append(cleaned[col][cleaned[col] &gt; case_threshold].dropna().reset_index()[col]) fig = plt.figure(figsize=(16, 8)) ax = plt.axes() pd.concat(cols, axis=1, names=list(cleaned)).plot(ax=ax, marker=&#39;o&#39;, logy=True) plt.title(&#39;COVID19 Growth in US states&#39;) plt.ylabel(&#39;Cumulative confirmed cases (log scale)&#39;) plt.xlabel(f&#39;Number of days since {case_threshold}th case&#39;) plt.annotate(&#39;Based on COVID Data Repository by Johns Hopkins CSSE nBy Avy Faingezicht, @avyfain&#39;, (0.07, 0.02), xycoords=&#39;figure fraction&#39;, fontsize=10); plt.legend(loc=&quot;lower right&quot;) if case_threshold == 100: x = np.linspace(0, plt.xlim()[1] - 1) plt.plot(x, 100 * (1.33) ** x, ls=&#39;--&#39;, color=&#39;k&#39;, label=&#39;33% daily growth&#39;) plt.annotate(&#39;33% Daily Growth&#39;, (0.85, 0.9), xycoords=&#39;figure fraction&#39;, fontsize=10); . . Updated hourly by GitHub Actions. . This visualization was made by Avy Faingezicht1. . . Data sourced from &quot;2019 Novel Coronavirus COVID-19 (2019-nCoV) Data Repository by Johns Hopkins CSSE&quot; GitHub repository. Link to original notebook.&#8617; . |",
            "url": "https://covid19dashboards.com/growth-us-states/",
            "relUrl": "/growth-us-states/",
            "date": " • Mar 13, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "COVID-19 Exploratory Data Analysis",
            "content": "These visualizations were made by Devakumar kp. Original notebook is here. . World-Wide Totals . Date Confirmed Deaths Recovered Active . 0 2020-03-12 00:00:00 | 128343 | 4720 | 68324 | 55299 | . Progession of Virus Over Time . Cumalitive Outcomes . . Recovery and Mortality Rate . . No. of Places To Which COVID-19 spread . . Maps . . Top 20 Countries . . Composition of Cases . . Epidemic Span . Note : In the graph, last day is shown as one day after the last time a new confirmed cases reported in the Country / Region . . China vs. Not China . . Data By Country . Top 50 Countries By Confirmed Cases . Country/Region Confirmed Deaths Recovered Active Mortality Rate . 0 China | 80932 | 3172 | 62901 | 14859 | 3.920000 | . 1 Italy | 12462 | 827 | 1045 | 10590 | 6.640000 | . 2 Iran | 10075 | 429 | 2959 | 6687 | 4.260000 | . 3 Korea, South | 7869 | 66 | 333 | 7470 | 0.840000 | . 4 France | 2284 | 48 | 12 | 2224 | 2.100000 | . 5 Spain | 2277 | 55 | 183 | 2039 | 2.420000 | . 6 Germany | 2078 | 3 | 25 | 2050 | 0.140000 | . 7 US | 1663 | 40 | 12 | 1611 | 2.410000 | . 8 Norway | 702 | 0 | 1 | 701 | 0.000000 | . 9 Cruise Ship | 696 | 7 | 325 | 364 | 1.010000 | . 10 Switzerland | 652 | 4 | 4 | 644 | 0.610000 | . 11 Japan | 639 | 16 | 118 | 505 | 2.500000 | . 12 Denmark | 617 | 0 | 1 | 616 | 0.000000 | . 13 Sweden | 599 | 1 | 1 | 597 | 0.170000 | . 14 Netherlands | 503 | 5 | 0 | 498 | 0.990000 | . 15 United Kingdom | 459 | 8 | 19 | 432 | 1.740000 | . 16 Belgium | 314 | 3 | 1 | 310 | 0.960000 | . 17 Austria | 302 | 1 | 4 | 297 | 0.330000 | . 18 Qatar | 262 | 0 | 0 | 262 | 0.000000 | . 19 Bahrain | 195 | 0 | 35 | 160 | 0.000000 | . 20 Singapore | 178 | 0 | 96 | 82 | 0.000000 | . 21 Malaysia | 149 | 0 | 26 | 123 | 0.000000 | . 22 Israel | 131 | 0 | 4 | 127 | 0.000000 | . 23 Australia | 128 | 3 | 21 | 104 | 2.340000 | . 24 Canada | 117 | 1 | 8 | 108 | 0.850000 | . 25 Iceland | 103 | 0 | 1 | 102 | 0.000000 | . 26 Greece | 99 | 1 | 0 | 98 | 1.010000 | . 27 Czechia | 94 | 0 | 0 | 94 | 0.000000 | . 28 Slovenia | 89 | 0 | 0 | 89 | 0.000000 | . 29 United Arab Emirates | 85 | 0 | 17 | 68 | 0.000000 | . 30 Kuwait | 80 | 0 | 5 | 75 | 0.000000 | . 31 India | 73 | 1 | 4 | 68 | 1.370000 | . 32 Iraq | 71 | 8 | 15 | 48 | 11.270000 | . 33 Thailand | 70 | 1 | 34 | 35 | 1.430000 | . 34 San Marino | 69 | 3 | 0 | 66 | 4.350000 | . 35 Egypt | 67 | 1 | 27 | 39 | 1.490000 | . 36 Lebanon | 61 | 3 | 1 | 57 | 4.920000 | . 37 Portugal | 59 | 0 | 0 | 59 | 0.000000 | . 38 Finland | 59 | 0 | 1 | 58 | 0.000000 | . 39 Philippines | 52 | 2 | 2 | 48 | 3.850000 | . 40 Brazil | 52 | 0 | 0 | 52 | 0.000000 | . 41 Romania | 49 | 0 | 6 | 43 | 0.000000 | . 42 Taiwan* | 49 | 1 | 20 | 28 | 2.040000 | . 43 Poland | 49 | 1 | 0 | 48 | 2.040000 | . 44 Saudi Arabia | 45 | 0 | 1 | 44 | 0.000000 | . 45 Ireland | 43 | 1 | 0 | 42 | 2.330000 | . 46 Vietnam | 39 | 0 | 16 | 23 | 0.000000 | . 47 Indonesia | 34 | 1 | 2 | 31 | 2.940000 | . 48 Russia | 28 | 0 | 3 | 25 | 0.000000 | . 49 Algeria | 24 | 1 | 8 | 15 | 4.170000 | . Top 25 Countries By Deaths Reported . Country/Region Deaths . 0 China | 3172 | . 1 Italy | 827 | . 2 Iran | 429 | . 3 Korea, South | 66 | . 4 Spain | 55 | . 5 France | 48 | . 6 US | 40 | . 7 Japan | 16 | . 8 Iraq | 8 | . 9 United Kingdom | 8 | . 10 Cruise Ship | 7 | . 11 Netherlands | 5 | . 12 Switzerland | 4 | . 13 Belgium | 3 | . 14 Australia | 3 | . 15 Germany | 3 | . 16 San Marino | 3 | . 17 Lebanon | 3 | . 18 Sweden | 1 | . 19 Austria | 1 | . 20 Canada | 1 | . 21 Greece | 1 | . 22 India | 1 | . 23 Thailand | 1 | . 24 Egypt | 1 | . Top 25 Chinese Provinces By Confirmed Cases . Province/State Confirmed Deaths Recovered . 0 Hubei | 67781 | 3056 | 50318 | . 1 Guangdong | 1356 | 8 | 1289 | . 2 Henan | 1273 | 22 | 1249 | . 3 Zhejiang | 1215 | 1 | 1197 | . 4 Hunan | 1018 | 4 | 999 | . 5 Anhui | 990 | 6 | 984 | . 6 Jiangxi | 935 | 1 | 934 | . 7 Shandong | 760 | 6 | 734 | . 8 Jiangsu | 631 | 0 | 629 | . 9 Chongqing | 576 | 6 | 564 | . 10 Sichuan | 539 | 3 | 498 | . 11 Heilongjiang | 482 | 13 | 441 | . 12 Beijing | 435 | 8 | 334 | . 13 Shanghai | 344 | 3 | 321 | . 14 Hebei | 318 | 6 | 308 | . 15 Fujian | 296 | 1 | 295 | . 16 Guangxi | 252 | 2 | 241 | . 17 Shaanxi | 245 | 2 | 232 | . 18 Yunnan | 174 | 2 | 170 | . 19 Hainan | 168 | 6 | 160 | . 20 Guizhou | 146 | 2 | 137 | . 21 Tianjin | 136 | 3 | 132 | . 22 Shanxi | 133 | 0 | 132 | . 23 Hong Kong | 129 | 3 | 67 | . 24 Gansu | 127 | 2 | 88 | . 25 Liaoning | 125 | 1 | 112 | . 26 Jilin | 93 | 1 | 91 | . 27 Xinjiang | 76 | 3 | 73 | . 28 Inner Mongolia | 75 | 1 | 71 | . 29 Ningxia | 75 | 0 | 72 | . 30 Qinghai | 18 | 0 | 18 | . 31 Macau | 10 | 0 | 10 | . 32 Tibet | 1 | 0 | 1 | . Related Work . https://www.kaggle.com/imdevskp/mers-outbreak-analysis | https://www.kaggle.com/imdevskp/sars-2003-outbreak-analysis | https://www.kaggle.com/imdevskp/western-africa-ebola-outbreak-analysis |",
            "url": "https://covid19dashboards.com/corona-eda/",
            "relUrl": "/corona-eda/",
            "date": " • Mar 13, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "COVID-19 Comparitive Analysis",
            "content": "These visualizations were made by Devakumar kp, from this kaggle kernel. . Reported Countries . . Deaths . . Proportion . . Comparison . . In the first N days . . Related Work . https://www.kaggle.com/imdevskp/covid-19-analysis-viz-prediction-comparisons | https://www.kaggle.com/imdevskp/western-africa-ebola-outbreak-analysis | https://www.kaggle.com/imdevskp/sars-2003-outbreak-analysis |",
            "url": "https://covid19dashboards.com/comparitive-analysis/",
            "relUrl": "/comparitive-analysis/",
            "date": " • Mar 13, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "Do you have a visualization that you would like to add? Please submit a Pull Request1 or get in touch!2 . This website is powered by fastpages, a blogging platform that natively supports Jupyter notebooks in addition to other formats. . View this project on GitHub. . . Familiarity with fastpages is helpful. All you need to do is include the appropriate front matter in your notebook. See this guide. You can submit a Pull Request at https://github.com/machine-learning-apps/covid19-dashboard. &#8617; . | Feel free to get in touch on Twitter: @HamelHusain &#8617; . |",
          "url": "https://covid19dashboards.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}