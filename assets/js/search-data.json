{
  
    
        "post0": {
            "title": "COVID-19 Growth By State (US)",
            "content": "#collapse-hide for case_threshold in [30, 100]: df = US_cities[US_cities[&#39;Total&#39;] &gt; case_threshold].sort_values(by=&#39;Total&#39;) df = df.drop([&#39;Province/State&#39;, &#39;Country/Region&#39;, &#39;Lat&#39;, &#39;Long&#39;, &#39;Total&#39;], axis=1) cols = list(df) df = df[cols[-2:] + cols[:-2]] states = df.melt(id_vars=[&#39;Area&#39;,&#39;State&#39;], var_name=&#39;date&#39;, value_name=&#39;cases_confirmed&#39;) pivoted = states.groupby([&#39;State&#39;, &#39;date&#39;], as_index=False).sum().pivot(&#39;date&#39;, &#39;State&#39;).cumsum() cleaned = pivoted.reset_index().cases_confirmed cols = [] for col in cleaned: cols.append(cleaned[col][cleaned[col] &gt; case_threshold].dropna().reset_index()[col]) fig = plt.figure(figsize=(16, 8)) ax = plt.axes() pd.concat(cols, axis=1, names=list(cleaned)).plot(ax=ax, marker=&#39;o&#39;, logy=True) plt.title(&#39;COVID19 Growth in US states&#39;) plt.ylabel(&#39;Cumulative confirmed cases (log scale)&#39;) plt.xlabel(f&#39;Number of days since {case_threshold}th case&#39;) plt.annotate(&#39;Based on COVID Data Repository by Johns Hopkins CSSE nBy Avy Faingezicht, @avyfain&#39;, (0.07, 0.02), xycoords=&#39;figure fraction&#39;, fontsize=10); plt.legend(loc=&quot;lower right&quot;) if case_threshold == 100: x = np.linspace(0, plt.xlim()[1] - 1) plt.plot(x, 100 * (1.33) ** x, ls=&#39;--&#39;, color=&#39;k&#39;, label=&#39;33% daily growth&#39;) plt.annotate(&#39;33% Daily Growth&#39;, (0.85, 0.9), xycoords=&#39;figure fraction&#39;, fontsize=10); . . Updated hourly by GitHub Actions. . This visualization was made by Avy Faingezicht1. . . Data sourced from &quot;2019 Novel Coronavirus COVID-19 (2019-nCoV) Data Repository by Johns Hopkins CSSE&quot; GitHub repository. Link to original notebook.&#8617; . |",
            "url": "https://covid19dashboards.com/growth-us-states/",
            "relUrl": "/growth-us-states/",
            "date": " • Mar 13, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "COVID-19 Comparitive Analysis",
            "content": "These visualizations were made by Devakumar kp, from this kaggle kernel. . Reported Countries . . Deaths . . Proportion . . Comparison . . In the first N days . . Related Work . https://www.kaggle.com/imdevskp/covid-19-analysis-viz-prediction-comparisons | https://www.kaggle.com/imdevskp/western-africa-ebola-outbreak-analysis | https://www.kaggle.com/imdevskp/sars-2003-outbreak-analysis |",
            "url": "https://covid19dashboards.com/comparitive-analysis/",
            "relUrl": "/comparitive-analysis/",
            "date": " • Mar 13, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "COVID-19 growth analysis",
            "content": "#collapse-hide def plot_countries(df, countries, min_cases=100, ls=&#39;-&#39;, col=&#39;cases&#39;): for country in countries: (df.loc[(df.country == country) &amp; (df.cases &gt;= min_cases)] .reset_index()[col] .plot(label=country, ls=ls) ) sns.set_palette(sns.hls_palette(8, l=.45, s=.8)) # 8 countries max fig, ax = plt.subplots(figsize=(12, 8)) countries = [&#39;Italy&#39;, &#39;US (total)&#39;, &#39;Germany&#39;, &#39;France&#39;, &#39;Spain&#39;, &#39;United Kingdom (total)&#39;, &#39;Poland&#39;, &#39;Iran&#39;] plot_countries(df_confirmed, countries) asian_countries = [&#39;Singapore&#39;, &#39;Japan&#39;, &#39;Korea, South&#39;, &#39;Hong Kong&#39;] plot_countries(df_confirmed, asian_countries, ls=&#39;--&#39;) x = np.linspace(0, plt.xlim()[1] - 1) plt.plot(x, 100 * (1.33) ** x, ls=&#39;--&#39;, color=&#39;k&#39;, label=&#39;33% daily growth&#39;) plt.yscale(&#39;log&#39;); plt.title(&#39;Data up to {}&#39;.format(df_confirmed.index.max().strftime(&#39;%B %d, %Y&#39;))) plt.xlabel(&#39;Days from first 100 confirmed cases&#39;) plt.ylabel(&#39;Confirmed cases (log scale)&#39;) ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter()) plt.legend(bbox_to_anchor=(1.0, 1.0)) sns.despine() plt.annotate(&#39;Based on COVID Data Repository by Johns Hopkins CSSE nBy Thomas Wiecki&#39;, (0.05, 0.0), xycoords=&#39;figure fraction&#39;, fontsize=10); . . #collapse-hide sns.set_palette(sns.hls_palette(8, l=.45, s=.8)) # 8 countries max fig, ax = plt.subplots(figsize=(12, 8)) # 28000 intensiv, 80% belegt icu_germany = 28000 #* .2 df_tmp = df_confirmed.loc[lambda x: (x.country == &#39;Germany&#39;) &amp; (x.cases &gt; 100)].cases_crit df_tmp.plot(ax=ax) x = np.linspace(0, 30, 30) pd.Series(index=pd.date_range(df_tmp.index[0], periods=30), data=100*p_crit * (1.33) ** x).plot(ls=&#39;--&#39;, color=&#39;k&#39;, label=&#39;33% daily growth&#39;) plt.axhline(icu_germany, color=&#39;.3&#39;, ls=&#39;-.&#39;, label=&#39;Total ICU beds&#39;) plt.axhline(icu_germany * .2, color=&#39;.5&#39;, ls=&#39;:&#39;, label=&#39;Free ICU beds&#39;) plt.yscale(&#39;log&#39;); plt.title(&#39;When will Germany run out of ICU beds?&#39;) #plt.xlabel(&#39;Days from first 100 confirmed cases&#39;) plt.ylabel(&#39;Expected critical cases (log scale)&#39;) ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter()) plt.legend(bbox_to_anchor=(1.0, 1.0)) sns.despine() plt.annotate(&#39;Based on COVID Data Repository by Johns Hopkins CSSE by {} nBy Thomas Wiecki&#39;.format(df_confirmed.index.max().strftime(&#39;%B %d, %Y&#39;)), (0.05, 0.0), xycoords=&#39;figure fraction&#39;, fontsize=10); . . #collapse-hide df_confirmed[&#39;pct_change&#39;] = df_confirmed.groupby(&#39;country&#39;).cases.pct_change().rolling(5).mean() fig, ax = plt.subplots(figsize=(14, 8)) df_confirmed.set_index(&#39;country&#39;, append=True).loc[(slice(None), countries), :].loc[lambda x: x.cases &gt; 100].reset_index().set_index(&#39;days_since_100&#39;).groupby(&#39;country&#39;)[&#39;pct_change&#39;].plot() df_confirmed.set_index(&#39;country&#39;, append=True).loc[(slice(None), asian_countries), :].loc[lambda x: x.cases &gt; 100].reset_index().set_index(&#39;days_since_100&#39;).groupby(&#39;country&#39;)[&#39;pct_change&#39;].plot(ls=&#39;--&#39;) plt.ylim(0, 1) plt.xlim(0, 20) plt.axhline(.33, ls=&#39;--&#39;, color=&#39;k&#39;) plt.legend() plt.title(&#39;Data up to {}&#39;.format(df_confirmed.index.max().strftime(&#39;%B %d, %Y&#39;))) plt.xlabel(&#39;Days from first 100 confirmed cases&#39;) plt.ylabel(&#39;Percent change from previous # of confirmed&#39;) ax.get_yaxis().set_major_formatter(matplotlib.ticker.ScalarFormatter()) plt.legend(bbox_to_anchor=(1.0, 1.0)) sns.despine() plt.annotate(&#39;Based on COVID Data Repository by Johns Hopkins CSSE nBy Thomas Wiecki&#39;, (0.05, 0.0), xycoords=&#39;figure fraction&#39;, fontsize=10); . . Updated hourly by GitHub Actions. . This visualization was made by Thomas Wiecki1. . . Data sourced from &quot;2019 Novel Coronavirus COVID-19 (2019-nCoV) Data Repository by Johns Hopkins CSSE&quot; GitHub repository and recreates the (pay-walled) plot in the Financial Times. This code is provided under the BSD-3 License. Link to original notebook.&#8617; . |",
            "url": "https://covid19dashboards.com/growth-analysis/",
            "relUrl": "/growth-analysis/",
            "date": " • Mar 12, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "Do you have a visualization that you would like to add? Please submit a Pull Request1 or get in touch!2 . This website is powered by fastpages, a blogging platform that natively supports Jupyter notebooks in addition to other formats. . View this project on GitHub. . . Familiarity with fastpages is helpful. All you need to do is include the appropriate front matter in your notebook. See this guide. You can submit a Pull Request at https://github.com/machine-learning-apps/covid19-dashboard. &#8617; . | Feel free to get in touch on Twitter: @HamelHusain &#8617; . |",
          "url": "https://covid19dashboards.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}